<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.IO" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Text.RegularExpressions" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Runtime" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs" #><#
    //
    var code = new CodeGenerationTools(this);
    var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
    var templatePath = this.Host.TemplateFile;

	string appSettingsFile = new DirectoryInfo(templatePath).Parent.Parent.GetDirectories("*.Api")[0].GetFiles("*.Development.json")[0].FullName;
	string json = File.ReadAllText(appSettingsFile);
	
	JObject config = JObject.Parse(json);
	string connectionString = config["ConnectionStrings"]?["AppDBContext"]?.ToString();

    Console.WriteLine(connectionString);
    
    var codeNamespace = code.VsNamespaceSuggestion();
    var tablas = new List<Tabla>();
    var referencias = new List<Referencia>();

	// Crear y abrir la conexión a la base de datos
    using (System.Data.SqlClient.SqlConnection connection = new System.Data.SqlClient.SqlConnection(connectionString))
    {
        connection.Open();

        // Definir la consulta para obtener las tablas y columnas
        string query = """
            SELECT 
                t.TABLE_NAME, 
                c.COLUMN_NAME, 
                CASE
                    WHEN c.DATA_TYPE LIKE '%CHAR' OR c.DATA_TYPE LIKE '%TEXT' THEN 'string'
                    WHEN c.DATA_TYPE IN ('DATETIME', 'DATE') THEN 'DateTime'
                    WHEN c.DATA_TYPE IN ('DECIMAL', 'NUMERIC') THEN 'decimal'
                    WHEN c.DATA_TYPE IN ('INT') THEN 'int'
                    WHEN c.DATA_TYPE IN ('BIT') THEN 'bool'
                    WHEN c.DATA_TYPE IN ('UNIQUEIDENTIFIER') THEN 'string'
                    ELSE 'Object' 
                END
                AS DATA_TYPE, 
                CAST(CASE c.IS_NULLABLE WHEN 'YES' THEN 1 ELSE 0 END AS BIT) AS IS_NULL,
                CAST(CASE WHEN c.COLUMN_NAME IN ('cod_estado','usu_insert','fec_insert','usu_update','fec_update') THEN 0 ELSE 1 END AS BIT) AS IS_VISIBLE
            FROM INFORMATION_SCHEMA.TABLES t
            JOIN INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME
            WHERE t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME <> 'REQUEST_LOGS'
            AND t.TABLE_SCHEMA = 'dbo'
            ORDER BY t.TABLE_NAME, c.ORDINAL_POSITION;
        """;

        string queryRef = """
            SELECT  
                fk.name AS ForeignKeyName,
                tp.name AS ParentTable,        -- Tabla Padre (Referenciada)
                cp.name AS ParentColumn,       -- Columna en la Tabla Padre
                tc.name AS ChildTable,         -- Tabla Hija (Que tiene la FK)
                cc.name AS ChildColumn         -- Columna en la Tabla Hija
            FROM sys.foreign_keys fk
            INNER JOIN sys.foreign_key_columns fkc 
                ON fk.object_id = fkc.constraint_object_id
            INNER JOIN sys.tables tp 
                ON fk.referenced_object_id = tp.object_id
            INNER JOIN sys.columns cp 
                ON fkc.referenced_column_id = cp.column_id AND fkc.referenced_object_id = cp.object_id
            INNER JOIN sys.tables tc 
                ON fk.parent_object_id = tc.object_id
            INNER JOIN sys.columns cc 
                ON fkc.parent_column_id = cc.column_id AND fkc.parent_object_id = cc.object_id
            INNER JOIN sys.schemas s
                ON s.schema_id = tp.schema_id
            WHERE s.name = 'dbo'
            ORDER BY ChildTable, ForeignKeyName;
        """;

        using (System.Data.SqlClient.SqlCommand command = new System.Data.SqlClient.SqlCommand(query, connection))
        {
            using (System.Data.SqlClient.SqlDataReader reader = command.ExecuteReader())
            {
                int i = -1;
                string currentTable = "";
                
                while (reader.Read())
                {
                    string tableName = reader["TABLE_NAME"].ToString();
                    string columnName = reader["COLUMN_NAME"].ToString();
                    string dataType = reader["DATA_TYPE"].ToString();
                    bool isNull = (bool)reader["IS_NULL"];
                    bool isVisible = (bool)reader["IS_VISIBLE"];

                    Tabla exist = tablas.Where(w => w.Name == tableName).FirstOrDefault();

                    //if (currentTable != tableName)
                    if (exist == null)
                    {
                        i++;

                        tablas.Add(new Tabla(tableName));

                        currentTable = tableName;
                    }

                    tablas[i].Columns.Add(new Columna(columnName, dataType, isNull, isVisible));
                }
                
            }
        }

        using (System.Data.SqlClient.SqlCommand command = new System.Data.SqlClient.SqlCommand(queryRef, connection))
        {
            using (System.Data.SqlClient.SqlDataReader reader = command.ExecuteReader())
            {
                while (reader.Read())
                {
                    string foreignKeyName = reader["ForeignKeyName"].ToString();
                    string ParentTable = reader["ParentTable"].ToString();
                    string ParentColumn = reader["ParentColumn"].ToString();
                    string ChildTable = reader["ChildTable"].ToString();
                    string ChildColumn = reader["ChildColumn"].ToString();

                    referencias.Add(new Referencia {
                        ForeignKeyName = reader["ForeignKeyName"].ToString(),
                        ParentTable = reader["ParentTable"].ToString(),
                        ParentColumn = reader["ParentColumn"].ToString(),
                        ChildTable = reader["ChildTable"].ToString(),
                        ChildColumn = reader["ChildColumn"].ToString()
                    });
                }
            }
        }
    } // SqlConection
    
    foreach (var entity in tablas)
    {
        fileManager.StartNewFile("Entities\\" + Titulo(entity.Name) + "Entity.cs");

        var padres = referencias.Where(w => w.ChildTable == entity.Name).ToList();
        var hijos = referencias.Where(w => w.ParentTable == entity.Name).ToList();

#>
namespace <#=codeNamespace#>.Entities
{
    public partial class <#=Titulo(entity.Name)#>Entity : BaseDomainModel
    {
<#
    foreach (var column in entity.Columns)
    {
        if (!column.IsVisible) continue;

        var n = column.IsNull ? "?" : "";
        var s = !column.IsNull && column.Type == "string" ? " = string.Empty;" : "";
#>
        public <#=column.Type#><#=n#> <#=column.Name#> { get; set; }<#=s#>
<#
    }

        foreach (var padre in padres)
        {
#>
        public <#=Titulo(padre.ParentTable)#>Entity? <#=padre.GetFieldName()#> { get; set; }
<#
        }

        foreach (var hijo in hijos)
        {
#>
        public List<<#=Titulo(hijo.ChildTable)#>Entity>? <#=hijo.GetChildName()#> { get; set; }
<#
        }
#>
    }
}
<#
    } //foreach

    fileManager.Process();
#> 
<#+
    public class Tabla
    {
        public string Name { get; set; }
        public List<Columna> Columns { get; set; } 

        public Tabla(string name)
        {
            this.Name = name;
            this.Columns = new List<Columna>();
        }
    }

    public class Columna
    {
        public Columna(string name, string type, bool isNull, bool isVisible)
        {
            this.Name = name;
            this.Type = type;
            this.IsNull = isNull;
            this.IsVisible = isVisible;
        }

        public string Name { get; set; }
        public string Type { get; set; }
        public bool IsNull { get; set; }
        public bool IsVisible { get; set; }
    }

    public class Referencia
    {
        public Referencia()
        {
        }

        public string ForeignKeyName { get; set; }
        public string ParentTable { get; set; }
        public string ParentColumn { get; set; }
        public string ChildTable { get; set; }
        public string ChildColumn { get; set; }

        public string GetFieldName()
        {
            return string.Equals(ChildColumn, ParentColumn)
                ? ParentTable.ToLower()
                : ChildColumn.Substring(3);
        }

        public string GetChildName()
        {
            return string.Equals(ChildColumn, ParentColumn)
                ? DetailName(ChildTable)
                : DetailName(ChildColumn.Substring(3) + "_" + ChildTable);
        }
    }

    public static void ArgumentNotNull<T>(T arg, string name) where T : class
    {
        if (arg == null)
        {
            throw new ArgumentNullException(name);
        }
    }

    private static readonly Lazy<System.Resources.ResourceManager> ResourceManager =
        new Lazy<System.Resources.ResourceManager>(
            () => new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(MetadataItemCollectionFactory).Assembly), isThreadSafe: true);

    public static string GetResourceString(string resourceName)
    {
        ArgumentNotNull(resourceName, "resourceName");

        return ResourceManager.Value.GetString(resourceName, null);
    }

    public static string Titulo(string value)
    {
        var values = value.Split('_');
        var items = values.Select(s => System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(s.ToLower()));
        
        return string.Join("", items);
    }

    public static string DetailName(string value)
    {
        var esVocal = Regex.IsMatch(value, "[aeiou]$", RegexOptions.IgnoreCase);
        var esY = value.ToLower().EndsWith("y");
        var name = value.ToLower() + (esVocal ? "s" : esY ? "ies" : "es");

        return name;
    }
#>